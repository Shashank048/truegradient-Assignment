{"ast":null,"code":"// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import api from '../../api/api';\n\n// export const signIn = createAsyncThunk('auth/signIn', async (payload, { rejectWithValue }) => {\n//   try {\n//     const res = await api.post('/auth/signin', payload);\n//     return res.data;\n//   } catch (err) {\n//     return rejectWithValue(err.response?.data || { message: 'Network error' });\n//   }\n// });\n\n// export const signUp = createAsyncThunk('auth/signUp', async (payload, { rejectWithValue }) => {\n//   try {\n//     const res = await api.post('/auth/signup', payload);\n//     return res.data;\n//   } catch (err) {\n//     return rejectWithValue(err.response?.data || { message: 'Network error' });\n//   }\n// });\n\n// const initialToken = localStorage.getItem('token');\n// const initialUser = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\n\n// const authSlice = createSlice({\n//   name: 'auth',\n//   initialState: { token: initialToken, user: initialUser, loading: false, error: null },\n//   reducers: {\n//     logout(state) {\n//       state.token = null;\n//       state.user = null;\n//       localStorage.removeItem('token');\n//       localStorage.removeItem('user');\n//     },\n//     setCredits(state, action) {\n//       if (state.user) state.user.credits = action.payload;\n//     }\n//   },\n//   extraReducers: builder => {\n//     builder\n//       .addCase(signIn.pending, state => { state.loading = true; state.error = null; })\n//       .addCase(signIn.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.token = action.payload.token;\n//         state.user = action.payload.user;\n//         localStorage.setItem('token', action.payload.token);\n//         localStorage.setItem('user', JSON.stringify(action.payload.user));\n//       })\n//       .addCase(signIn.rejected, (state, action) => { state.loading = false; state.error = action.payload?.message; })\n//       .addCase(signUp.pending, state => { state.loading = true; state.error = null; })\n//       .addCase(signUp.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.token = action.payload.token;\n//         state.user = action.payload.user;\n//         localStorage.setItem('token', action.payload.token);\n//         localStorage.setItem('user', JSON.stringify(action.payload.user));\n//       })\n//       .addCase(signUp.rejected, (state, action) => { state.loading = false; state.error = action.payload?.message; });\n//   }\n// });\n\n// export const { logout, setCredits } = authSlice.actions;\n// export default authSlice.reducer;","map":{"version":3,"names":[],"sources":["C:/Users/Shashan/Videos/truegradient - 2 Assignment/frontend/src/features/auth/authSlice.js"],"sourcesContent":["// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n// import api from '../../api/api';\r\n\r\n// export const signIn = createAsyncThunk('auth/signIn', async (payload, { rejectWithValue }) => {\r\n//   try {\r\n//     const res = await api.post('/auth/signin', payload);\r\n//     return res.data;\r\n//   } catch (err) {\r\n//     return rejectWithValue(err.response?.data || { message: 'Network error' });\r\n//   }\r\n// });\r\n\r\n// export const signUp = createAsyncThunk('auth/signUp', async (payload, { rejectWithValue }) => {\r\n//   try {\r\n//     const res = await api.post('/auth/signup', payload);\r\n//     return res.data;\r\n//   } catch (err) {\r\n//     return rejectWithValue(err.response?.data || { message: 'Network error' });\r\n//   }\r\n// });\r\n\r\n\r\n// const initialToken = localStorage.getItem('token');\r\n// const initialUser = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\r\n\r\n// const authSlice = createSlice({\r\n//   name: 'auth',\r\n//   initialState: { token: initialToken, user: initialUser, loading: false, error: null },\r\n//   reducers: {\r\n//     logout(state) {\r\n//       state.token = null;\r\n//       state.user = null;\r\n//       localStorage.removeItem('token');\r\n//       localStorage.removeItem('user');\r\n//     },\r\n//     setCredits(state, action) {\r\n//       if (state.user) state.user.credits = action.payload;\r\n//     }\r\n//   },\r\n//   extraReducers: builder => {\r\n//     builder\r\n//       .addCase(signIn.pending, state => { state.loading = true; state.error = null; })\r\n//       .addCase(signIn.fulfilled, (state, action) => {\r\n//         state.loading = false;\r\n//         state.token = action.payload.token;\r\n//         state.user = action.payload.user;\r\n//         localStorage.setItem('token', action.payload.token);\r\n//         localStorage.setItem('user', JSON.stringify(action.payload.user));\r\n//       })\r\n//       .addCase(signIn.rejected, (state, action) => { state.loading = false; state.error = action.payload?.message; })\r\n//       .addCase(signUp.pending, state => { state.loading = true; state.error = null; })\r\n//       .addCase(signUp.fulfilled, (state, action) => {\r\n//         state.loading = false;\r\n//         state.token = action.payload.token;\r\n//         state.user = action.payload.user;\r\n//         localStorage.setItem('token', action.payload.token);\r\n//         localStorage.setItem('user', JSON.stringify(action.payload.user));\r\n//       })\r\n//       .addCase(signUp.rejected, (state, action) => { state.loading = false; state.error = action.payload?.message; });\r\n//   }\r\n// });\r\n\r\n// export const { logout, setCredits } = authSlice.actions;\r\n// export default authSlice.reducer;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}