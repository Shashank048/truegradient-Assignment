{"ast":null,"code":"// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import api from '../../api/api';\n\n// export const fetchMessages = createAsyncThunk('chat/fetchMessages', async (_, { rejectWithValue }) => {\n//   try {\n//     const res = await api.get('/chat/messages');\n//     return res.data;\n//   } catch (err) {\n//     return rejectWithValue(err.response?.data);\n//   }\n// });\n\n// export const sendMessage = createAsyncThunk('chat/sendMessage', async (payload, { rejectWithValue }) => {\n//   try {\n//     const res = await api.post('/chat/messages', payload);\n//     // return updated list\n//     const list = await api.get('/chat/messages');\n//     return list.data;\n//   } catch (err) {\n//     return rejectWithValue(err.response?.data);\n//   }\n// });\n\n// const chatSlice = createSlice({\n//   name: 'chat',\n//   initialState: { messages: [], loading: false, error: null },\n//   reducers: {},\n//   extraReducers: builder => {\n//     builder\n//       .addCase(fetchMessages.pending, state => { state.loading = true; })\n//       .addCase(fetchMessages.fulfilled, (state, action) => { state.loading = false; state.messages = action.payload; })\n//       .addCase(fetchMessages.rejected, (state, action) => { state.loading = false; state.error = action.payload; })\n//       .addCase(sendMessage.fulfilled, (state, action) => { state.messages = action.payload; });\n//   }\n// });\n\n// export default chatSlice.reducer;","map":{"version":3,"names":[],"sources":["C:/Users/Shashan/Videos/truegradient - 2 Assignment/frontend/src/features/chat/chatSlice.js"],"sourcesContent":["// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n// import api from '../../api/api';\r\n\r\n// export const fetchMessages = createAsyncThunk('chat/fetchMessages', async (_, { rejectWithValue }) => {\r\n//   try {\r\n//     const res = await api.get('/chat/messages');\r\n//     return res.data;\r\n//   } catch (err) {\r\n//     return rejectWithValue(err.response?.data);\r\n//   }\r\n// });\r\n\r\n// export const sendMessage = createAsyncThunk('chat/sendMessage', async (payload, { rejectWithValue }) => {\r\n//   try {\r\n//     const res = await api.post('/chat/messages', payload);\r\n//     // return updated list\r\n//     const list = await api.get('/chat/messages');\r\n//     return list.data;\r\n//   } catch (err) {\r\n//     return rejectWithValue(err.response?.data);\r\n//   }\r\n// });\r\n\r\n// const chatSlice = createSlice({\r\n//   name: 'chat',\r\n//   initialState: { messages: [], loading: false, error: null },\r\n//   reducers: {},\r\n//   extraReducers: builder => {\r\n//     builder\r\n//       .addCase(fetchMessages.pending, state => { state.loading = true; })\r\n//       .addCase(fetchMessages.fulfilled, (state, action) => { state.loading = false; state.messages = action.payload; })\r\n//       .addCase(fetchMessages.rejected, (state, action) => { state.loading = false; state.error = action.payload; })\r\n//       .addCase(sendMessage.fulfilled, (state, action) => { state.messages = action.payload; });\r\n//   }\r\n// });\r\n\r\n// export default chatSlice.reducer;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}