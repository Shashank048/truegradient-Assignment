{"ast":null,"code":"// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import api from '../../api/api';\n\n// export const fetchNotifications = createAsyncThunk('ui/fetchNotifications', async (_, { rejectWithValue }) => {\n//   try {\n//     const res = await api.get('/notifications');\n//     return res.data;\n//   } catch (err) {\n//     return rejectWithValue(err.response?.data);\n//   }\n// });\n\n// const uiSlice = createSlice({\n//   name: 'ui',\n//   initialState: { notifications: [], notifOpen: false, loading: false },\n//   reducers: {\n//     toggleNotif(state) { state.notifOpen = !state.notifOpen; }\n//   },\n//   extraReducers: builder => {\n//     builder\n//       .addCase(fetchNotifications.pending, state => { state.loading = true; })\n//       .addCase(fetchNotifications.fulfilled, (state, action) => { state.loading = false; state.notifications = action.payload; })\n//       .addCase(fetchNotifications.rejected, state => { state.loading = false; });\n//   }\n// });\n\n// export const { toggleNotif } = uiSlice.actions;\n// export default uiSlice.reducer;","map":{"version":3,"names":[],"sources":["C:/Users/Shashan/Videos/truegradient - 2 Assignment/frontend/src/features/ui/uiSlice.js"],"sourcesContent":["// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n// import api from '../../api/api';\r\n\r\n// export const fetchNotifications = createAsyncThunk('ui/fetchNotifications', async (_, { rejectWithValue }) => {\r\n//   try {\r\n//     const res = await api.get('/notifications');\r\n//     return res.data;\r\n//   } catch (err) {\r\n//     return rejectWithValue(err.response?.data);\r\n//   }\r\n// });\r\n\r\n// const uiSlice = createSlice({\r\n//   name: 'ui',\r\n//   initialState: { notifications: [], notifOpen: false, loading: false },\r\n//   reducers: {\r\n//     toggleNotif(state) { state.notifOpen = !state.notifOpen; }\r\n//   },\r\n//   extraReducers: builder => {\r\n//     builder\r\n//       .addCase(fetchNotifications.pending, state => { state.loading = true; })\r\n//       .addCase(fetchNotifications.fulfilled, (state, action) => { state.loading = false; state.notifications = action.payload; })\r\n//       .addCase(fetchNotifications.rejected, state => { state.loading = false; });\r\n//   }\r\n// });\r\n\r\n// export const { toggleNotif } = uiSlice.actions;\r\n// export default uiSlice.reducer;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}